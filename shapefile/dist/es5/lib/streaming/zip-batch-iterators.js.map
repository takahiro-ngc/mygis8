{"version":3,"sources":["../../../../src/lib/streaming/zip-batch-iterators.ts"],"names":["zipBatchIterators","iterator1","iterator2","batch1","batch2","iterator1Done","iterator2Done","length","next","value","done","batch","extractBatch","batchLength","Math","min","slice","splice"],"mappings":";;;;;;;;;;;;;;;SAMuBA,iB;;;;;mFAAhB,iBACLC,SADK,EAELC,SAFK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIDC,YAAAA,MAJC,GAIQ,EAJR;AAKDC,YAAAA,MALC,GAKQ,EALR;AAMDC,YAAAA,aANC,GAMwB,KANxB;AAODC,YAAAA,aAPC,GAOwB,KAPxB;;AAAA;AAAA,kBAWE,CAACD,aAAD,IAAkB,CAACC,aAXrB;AAAA;AAAA;AAAA;;AAAA,kBAYCH,MAAM,CAACI,MAAP,KAAkB,CAAlB,IAAuB,CAACF,aAZzB;AAAA;AAAA;AAAA;;AAAA;AAAA,sDAa2BJ,SAAS,CAACO,IAAV,EAb3B;;AAAA;AAAA;AAaMC,YAAAA,KAbN,yBAaMA,KAbN;AAaaC,YAAAA,IAbb,yBAaaA,IAbb;;AAcD,gBAAIA,IAAJ,EAAU;AACRL,cAAAA,aAAa,GAAG,IAAhB;AACD,aAFD,MAEO;AACLF,cAAAA,MAAM,GAAGM,KAAT;AACD;;AAlBA;AAAA;;AAAA;AAAA,kBAmBQL,MAAM,CAACG,MAAP,KAAkB,CAAlB,IAAuB,CAACD,aAnBhC;AAAA;AAAA;AAAA;;AAAA;AAAA,sDAoB2BJ,SAAS,CAACM,IAAV,EApB3B;;AAAA;AAAA;AAoBMC,YAAAA,MApBN,0BAoBMA,KApBN;AAoBaC,YAAAA,KApBb,0BAoBaA,IApBb;;AAqBD,gBAAIA,KAAJ,EAAU;AACRJ,cAAAA,aAAa,GAAG,IAAhB;AACD,aAFD,MAEO;AACLF,cAAAA,MAAM,GAAGK,MAAT;AACD;;AAzBA;AA4BGE,YAAAA,KA5BH,GA4BWC,YAAY,CAACT,MAAD,EAASC,MAAT,CA5BvB;;AAAA,iBA6BCO,KA7BD;AAAA;AAAA;AAAA;;AAAA;AA8BD,mBAAMA,KAAN;;AA9BC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0CP,SAASC,YAAT,CAAsBT,MAAtB,EAAwCC,MAAxC,EAA6E;AAC3E,MAAMS,WAAmB,GAAGC,IAAI,CAACC,GAAL,CAASZ,MAAM,CAACI,MAAhB,EAAwBH,MAAM,CAACG,MAA/B,CAA5B;;AACA,MAAIM,WAAW,KAAK,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAGD,MAAMF,KAAiB,GAAG,CAACR,MAAM,CAACa,KAAP,CAAa,CAAb,EAAgBH,WAAhB,CAAD,EAA+BT,MAAM,CAACY,KAAP,CAAa,CAAb,EAAgBH,WAAhB,CAA/B,CAA1B;AAGAV,EAAAA,MAAM,CAACc,MAAP,CAAc,CAAd,EAAiBJ,WAAjB;AACAT,EAAAA,MAAM,CAACa,MAAP,CAAc,CAAd,EAAiBJ,WAAjB;AACA,SAAOF,KAAP;AACD","sourcesContent":["/**\n * Zip two iterators together\n *\n * @param iterator1\n * @param iterator2\n */\nexport async function* zipBatchIterators(\n  iterator1: AsyncIterator<any[]>,\n  iterator2: AsyncIterator<any[]>\n): AsyncGenerator<number[][], void, unknown> {\n  let batch1 = [];\n  let batch2 = [];\n  let iterator1Done: boolean = false;\n  let iterator2Done: boolean = false;\n\n  // TODO - one could let all iterators flow at full speed using `Promise.race`\n  // however we might end up with a big temporary buffer\n  while (!iterator1Done && !iterator2Done) {\n    if (batch1.length === 0 && !iterator1Done) {\n      const {value, done} = await iterator1.next();\n      if (done) {\n        iterator1Done = true;\n      } else {\n        batch1 = value;\n      }\n    } else if (batch2.length === 0 && !iterator2Done) {\n      const {value, done} = await iterator2.next();\n      if (done) {\n        iterator2Done = true;\n      } else {\n        batch2 = value;\n      }\n    }\n\n    const batch = extractBatch(batch1, batch2);\n    if (batch) {\n      yield batch;\n    }\n  }\n}\n\n/**\n * Extract batch of same length from two batches\n *\n * @param batch1\n * @param batch2\n * @return array | null\n */\nfunction extractBatch(batch1: number[], batch2: number[]): number[][] | null {\n  const batchLength: number = Math.min(batch1.length, batch2.length);\n  if (batchLength === 0) {\n    return null;\n  }\n\n  // Non interleaved arrays\n  const batch: number[][] = [batch1.slice(0, batchLength), batch2.slice(0, batchLength)];\n\n  // Modify the 2 batches\n  batch1.splice(0, batchLength);\n  batch2.splice(0, batchLength);\n  return batch;\n}\n"],"file":"zip-batch-iterators.js"}