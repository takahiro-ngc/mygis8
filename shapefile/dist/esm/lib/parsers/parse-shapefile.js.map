{"version":3,"sources":["../../../../src/lib/parsers/parse-shapefile.ts"],"names":["binaryToGeometry","transformGeoJsonCoords","Proj4Projection","parseShx","zipBatchIterators","SHPLoader","DBFLoader","parseShapefileInBatches","asyncIterator","options","context","reproject","_targetCrs","gis","shx","cpg","prj","loadShapefileSidecarFiles","shapeIterable","parseInBatches","propertyIterable","dbfResponse","fetch","replaceExtension","url","ok","dbf","encoding","shapeHeader","next","value","batchType","dbfHeader","iterator","item","geometries","properties","geojsonGeometries","parseGeometries","features","joinProperties","reprojectFeatures","header","data","parseShapefile","arrayBuffer","parse","geom","push","i","length","geometry","feature","type","sourceCrs","targetCrs","projection","from","to","coord","project","shxPromise","cpgPromise","prjPromise","Promise","all","shxResponse","cpgResponse","text","prjResponse","newExtension","baseName","basename","extension","extname","isUpperCase","toUpperCase","extIndex","lastIndexOf","substr"],"mappings":"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","sourcesContent":["// import type {Feature} from '@loaders.gl/gis';\nimport type {SHXOutput} from './parse-shx';\nimport type {SHPHeader} from './parse-shp-header';\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\n\nimport {binaryToGeometry, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {parseShx} from './parse-shx';\nimport {zipBatchIterators} from '../streaming/zip-batch-iterators';\nimport {SHPLoader} from '../../shp-loader';\nimport {DBFLoader} from '../../dbf-loader';\n\ntype Feature = any;\ninterface ShapefileOutput {\n  encoding?: string;\n  prj?: string;\n  shx?: SHXOutput;\n  header: SHPHeader;\n  data: object[];\n}\n/**\n * Parsing of file in batches\n *\n * @param asyncIterator\n * @param options\n * @param context\n */\n// eslint-disable-next-line max-statements, complexity\nexport async function* parseShapefileInBatches(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options?: any,\n  context?: LoaderContext\n): AsyncIterable<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const shapeIterable: any = await context.parseInBatches(asyncIterator, SHPLoader, options);\n\n  // parse properties\n  let propertyIterable: any;\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context?.url || '', 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    propertyIterable = await context.parseInBatches(dbfResponse, DBFLoader, {\n      ...options,\n      dbf: {encoding: cpg || 'latin1'}\n    });\n  }\n\n  // When `options.metadata` is `true`, there's an extra initial `metadata`\n  // object before the iterator starts. zipBatchIterators expects to receive\n  // batches of Array objects, and will fail with non-iterable batches, so it's\n  // important to skip over the first batch.\n  let shapeHeader = (await shapeIterable.next()).value;\n  if (shapeHeader && shapeHeader.batchType === 'metadata') {\n    shapeHeader = (await shapeIterable.next()).value;\n  }\n\n  let dbfHeader: {batchType?: string} = {};\n  if (propertyIterable) {\n    dbfHeader = (await propertyIterable.next()).value;\n    if (dbfHeader && dbfHeader.batchType === 'metadata') {\n      dbfHeader = (await propertyIterable.next()).value;\n    }\n  }\n\n  let iterator: any;\n  if (propertyIterable) {\n    iterator = zipBatchIterators(shapeIterable, propertyIterable);\n  } else {\n    iterator = shapeIterable;\n  }\n\n  for await (const item of iterator) {\n    let geometries: any;\n    let properties: any;\n    if (!propertyIterable) {\n      geometries = item;\n    } else {\n      [geometries, properties] = item;\n    }\n\n    const geojsonGeometries = parseGeometries(geometries);\n    let features = joinProperties(geojsonGeometries, properties);\n    if (reproject) {\n      // @ts-ignore\n      features = reprojectFeatures(features, prj, _targetCrs);\n    }\n    yield {\n      encoding: cpg,\n      prj,\n      shx,\n      header: shapeHeader,\n      data: features\n    };\n  }\n}\n\n/**\n * Parse shapefile\n *\n * @param arrayBuffer\n * @param options\n * @param context\n * @returns output of shapefile\n */\nexport async function parseShapefile(\n  arrayBuffer: ArrayBuffer,\n  options?: {[key: string]: any},\n  context?: LoaderContext\n): Promise<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const {header, geometries} = await context.parse(arrayBuffer, SHPLoader, options); // {shp: shx}\n\n  const geojsonGeometries = parseGeometries(geometries);\n\n  // parse properties\n  let properties = [];\n\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context.url, 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    properties = await context.parse(dbfResponse, DBFLoader, {dbf: {encoding: cpg || 'latin1'}});\n  }\n\n  let features = joinProperties(geojsonGeometries, properties);\n  if (reproject) {\n    features = reprojectFeatures(features, prj, _targetCrs);\n  }\n\n  return {\n    encoding: cpg,\n    prj,\n    shx,\n    header,\n    data: features\n  };\n}\n\n/**\n * Parse geometries\n *\n * @param geometries\n * @returns geometries as an array\n */\nfunction parseGeometries(geometries: any[]): any[] {\n  const geojsonGeometries: any[] = [];\n  for (const geom of geometries) {\n    geojsonGeometries.push(binaryToGeometry(geom));\n  }\n  return geojsonGeometries;\n}\n\n/**\n * Join properties and geometries into features\n *\n * @param geometries [description]\n * @param  properties [description]\n * @return [description]\n */\nfunction joinProperties(geometries: object[], properties: object[]): Feature[] {\n  const features: Feature[] = [];\n  for (let i = 0; i < geometries.length; i++) {\n    const geometry = geometries[i];\n    const feature: Feature = {\n      type: 'Feature',\n      geometry,\n      // properties can be undefined if dbfResponse above was empty\n      properties: (properties && properties[i]) || {}\n    };\n    features.push(feature);\n  }\n\n  return features;\n}\n\n/**\n * Reproject GeoJSON features to output CRS\n *\n * @param features parsed GeoJSON features\n * @param sourceCrs source coordinate reference system\n * @param targetCrs †arget coordinate reference system\n * @return Reprojected Features\n */\nfunction reprojectFeatures(features: Feature[], sourceCrs?: string, targetCrs?: string): Feature[] {\n  if (!sourceCrs && !targetCrs) {\n    return features;\n  }\n\n  const projection = new Proj4Projection({from: sourceCrs || 'WGS84', to: targetCrs || 'WGS84'});\n  return transformGeoJsonCoords(features, (coord) => projection.project(coord));\n}\n\n/**\n *\n * @param options\n * @param context\n * @returns Promise\n */\n// eslint-disable-next-line max-statements\nexport async function loadShapefileSidecarFiles(\n  options?: object,\n  context?: LoaderContext\n): Promise<{\n  shx?: SHXOutput;\n  cpg?: string;\n  prj?: string;\n}> {\n  // Attempt a parallel load of the small sidecar files\n  // @ts-ignore context must be defined\n  const {url, fetch} = context;\n  const shxPromise = fetch(replaceExtension(url, 'shx'));\n  const cpgPromise = fetch(replaceExtension(url, 'cpg'));\n  const prjPromise = fetch(replaceExtension(url, 'prj'));\n  await Promise.all([shxPromise, cpgPromise, prjPromise]);\n\n  let shx: SHXOutput | undefined;\n  let cpg: string | undefined;\n  let prj: string | undefined;\n\n  const shxResponse = await shxPromise;\n  if (shxResponse.ok) {\n    const arrayBuffer = await shxResponse.arrayBuffer();\n    shx = parseShx(arrayBuffer);\n  }\n\n  const cpgResponse = await cpgPromise;\n  if (cpgResponse.ok) {\n    cpg = await cpgResponse.text();\n  }\n\n  const prjResponse = await prjPromise;\n  if (prjResponse.ok) {\n    prj = await prjResponse.text();\n  }\n\n  return {\n    shx,\n    cpg,\n    prj\n  };\n}\n\n/**\n * Replace the extension at the end of a path.\n *\n * Matches the case of new extension with the case of the original file extension,\n * to increase the chance of finding files without firing off a request storm looking for various case combinations\n *\n * NOTE: Extensions can be both lower and uppercase\n * per spec, extensions should be lower case, but that doesn't mean they always are. See:\n * calvinmetcalf/shapefile-js#64, mapserver/mapserver#4712\n * https://trac.osgeo.org/mapserver/ticket/166\n */\nexport function replaceExtension(url: string, newExtension: string): string {\n  const baseName = basename(url);\n  const extension = extname(url);\n  const isUpperCase = extension === extension.toUpperCase();\n  if (isUpperCase) {\n    newExtension = newExtension.toUpperCase();\n  }\n  return `${baseName}.${newExtension}`;\n}\n\n// NOTE - this gives the entire path minus extension (i.e. NOT same as path.basename)\n/**\n * @param url\n * @returns string\n */\nfunction basename(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(0, extIndex) : '';\n  }\n  return extIndex;\n}\n/**\n * @param url\n * @returns string\n */\nfunction extname(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(extIndex + 1) : '';\n  }\n  return extIndex;\n}\n"],"file":"parse-shapefile.js"}