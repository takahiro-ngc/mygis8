{"version":3,"sources":["../../../../src/lib/streaming/binary-reader.ts"],"names":["BinaryReader","constructor","arrayBuffer","offset","hasAvailableBytes","bytes","byteLength","getDataView","Error","dataView","DataView","skip","rewind"],"mappings":";AAAA,eAAe,MAAMA,YAAN,CAAmB;AAIhCC,EAAAA,WAAW,CAACC,WAAD,EAA2B;AAAA;;AAAA;;AAEpC,SAAKC,MAAL,GAAc,CAAd;AAEA,SAAKD,WAAL,GAAmBA,WAAnB;AACD;;AAODE,EAAAA,iBAAiB,CAACC,KAAD,EAAyB;AACxC,WAAO,KAAKH,WAAL,CAAiBI,UAAjB,GAA8B,KAAKH,MAAnC,IAA6CE,KAApD;AACD;;AAQDE,EAAAA,WAAW,CAACF,KAAD,EAA0B;AACnC,QAAIA,KAAK,IAAI,CAAC,KAAKD,iBAAL,CAAuBC,KAAvB,CAAd,EAA6C;AAC3C,YAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,UAAMC,QAAQ,GAAGJ,KAAK,GAClB,IAAIK,QAAJ,CAAa,KAAKR,WAAlB,EAA+B,KAAKC,MAApC,EAA4CE,KAA5C,CADkB,GAElB,IAAIK,QAAJ,CAAa,KAAKR,WAAlB,EAA+B,KAAKC,MAApC,CAFJ;AAGA,SAAKA,MAAL,IAAeE,KAAf;AACA,WAAOI,QAAP;AACD;;AAODE,EAAAA,IAAI,CAACN,KAAD,EAAsB;AACxB,SAAKF,MAAL,IAAeE,KAAf;AACD;;AAODO,EAAAA,MAAM,CAACP,KAAD,EAAsB;AAC1B,SAAKF,MAAL,IAAeE,KAAf;AACD;;AAtD+B","sourcesContent":["export default class BinaryReader {\n  offset: number;\n  arrayBuffer: ArrayBuffer;\n\n  constructor(arrayBuffer: ArrayBuffer) {\n    /** current global (stream) offset */\n    this.offset = 0;\n    /** current buffer from iterator */\n    this.arrayBuffer = arrayBuffer;\n  }\n  /**\n   * Checks if there are available bytes in data\n   *\n   * @param bytes\n   * @returns boolean\n   */\n  hasAvailableBytes(bytes: number): boolean {\n    return this.arrayBuffer.byteLength - this.offset >= bytes;\n  }\n\n  /**\n   * Get the required number of bytes from the iterator\n   *\n   * @param bytes\n   * @returns Dataview\n   */\n  getDataView(bytes: number): DataView {\n    if (bytes && !this.hasAvailableBytes(bytes)) {\n      throw new Error('binary data exhausted');\n    }\n\n    const dataView = bytes\n      ? new DataView(this.arrayBuffer, this.offset, bytes)\n      : new DataView(this.arrayBuffer, this.offset);\n    this.offset += bytes;\n    return dataView;\n  }\n\n  /**\n   * Skipping\n   *\n   * @param bytes\n   */\n  skip(bytes: number): void {\n    this.offset += bytes;\n  }\n\n  /**\n   * Rewinding\n   *\n   * @param bytes\n   */\n  rewind(bytes: number): void {\n    this.offset -= bytes;\n  }\n}\n"],"file":"binary-reader.js"}